#!/bin/bash

BINARY_NAME="sshnp";

norm_atsign() {
  KEY="$1" # Get the variable name
  INPUT=${!KEY} # Get the value of the variable
  shopt -s extglob
  ATSIGN=${INPUT/#?(\@)/\@} # Add @ if missing
  shopt -u extglob
  export "${KEY}"="$ATSIGN" # Set the variable to new value
}

norm_version() {
  KEY="$1" # Get the variable name
  INPUT=${!KEY} # Get the value of the variable
  shopt -s extglob
  OUTPUT=${INPUT#tags\/} # Remove tags prefix if present
  OUTPUT=${OUTPUT#v} # Remove v prefix if present
  shopt -u extglob
  export "${KEY}"="tags/v$OUTPUT" # Add full tags/v prefix
}

usage() {
  echo "Usage: $0 [options]"
  echo "General options:"
  echo "  -u, --update                Update the main binaries instead of installing"
  echo "  -l, --local <path>          Install using local zip/tgz"
  echo "  -r, --repo <path>           Install using local repo"
  echo "  -h, --help                  Display this help message"
  echo ""
  echo "Installation options:"
  echo "  -c, --client <address>      Client address (e.g. @alice_client)"
  echo "  -d, --device <address>      Device address (e.g. @alice_device)"
  echo "  -h, --host <region code>    Default host rendezvous region code (am, eu, ap)"
  echo "                              Specify an atSign to override with a custom host"
  echo "  -v, --version <version>     Version to install (default: latest)"
}

parse_args() {
  echo "ARGS: $*"
  SSHNP_OP="install"
  while [ $# -gt 0 ]; do
    case "$1" in
      -u|--update)
        SSHNP_OP="update"
        shift 1
      ;;
      --help)
        usage
        exit 0
      ;;
      -l|--local)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_LOCAL="$2"
        shift 2
      ;;
      -r|--repo)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_DEV_MODE="$2"
        shift 2
      ;;
      -c|--client)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        CLIENT_ATSIGN="$2"
        shift 2
      ;;
      -d|--device)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        DEVICE_MANAGER_ATSIGN="$2"
        shift 2
      ;;
      -h|--host)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        HOST_RENDEZVOUS_ATSIGN="$2"
        shift 2
      ;;
      -v|--version)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_VERSION="$2"
        shift 2
      ;;
      *)
        echo "Unknown argument: $1"
        exit 1
      ;;
    esac
  done

  if [ "$SSHNP_OP" = "install" ]; then
    while [ -z "$CLIENT_ATSIGN" ]; do
      read -rp "Client address (e.g. @alice_client): " CLIENT_ATSIGN;
    done

    while [ -z "$DEVICE_MANAGER_ATSIGN" ]; do
      read -rp "Device address (e.g. @alice_device): " DEVICE_MANAGER_ATSIGN;
    done

    if [ -z "$HOST_RENDEZVOUS_ATSIGN" ]; then
      echo Pick your default region:
      echo "  am   : Americas"
      echo "  ap   : Asia Pacific"
      echo "  eu   : Europe"
      echo "  @___ : Specify a custom region atSign"
      read -rp "> " HOST_RENDEZVOUS_ATSIGN;
    fi

    while [[ "$HOST_RENDEZVOUS_ATSIGN" != @* ]]; do
      case "$HOST_RENDEZVOUS_ATSIGN" in
        [Aa][Mm]*)
          HOST_RENDEZVOUS_ATSIGN="@rv_am"
          ;;
        [Ee][Uu]*)
          HOST_RENDEZVOUS_ATSIGN="@rv_eu"
          ;;
        [Aa][Pp]*)
          HOST_RENDEZVOUS_ATSIGN="@rv_ap"
          ;;
        @*)
          # Do nothing for custom region
          ;;
        *)
          echo "Invalid region: $HOST_RENDEZVOUS_ATSIGN"
          read -rp "region: " HOST_RENDEZVOUS_ATSIGN;
          ;;
      esac
    done

    norm_atsign CLIENT_ATSIGN
    norm_atsign DEVICE_MANAGER_ATSIGN
    echo;
  fi
}

parse_env() {
  if [ -z "$SSHNP_USER" ]; then
    SSHNP_USER="$USER";
  fi
  HOME_PATH=$(eval echo "~$SSHNP_USER");

  if [ -z "$SSHNP_VERSION" ]; then
    SSHNP_VERSION="latest";
  else
    norm_version SSHNP_VERSION
  fi
  URL="https://api.github.com/repos/atsign-foundation/sshnoports/releases/$SSHNP_VERSION";

  case "$(uname)" in
    Darwin)
      PLATFORM="macos"
      EXT="zip"
      ;;
    Linux)
      PLATFORM="linux"
      EXT="tgz"
      ;;
    *)
      PLATFORM="Unknown"
      ;;
  esac

  if [ "$PLATFORM" == "Unknown" ]; then
    echo "Unsupported platform: $(uname)";
    exit 1;
  fi

  # ARCH includes the dot at the end to avoid conflict between arm and arm64
  case "$(uname -m)" in
    aarch64|arm64) ARCH="arm64\.";;
    x86_64|amd64) ARCH="x64\.";;
    armv7l|arm) ARCH="arm\.";;
    riscv64) ARCH="riscv64\.";;
    *) ARCH="Unknown";;
  esac

  if [ "$ARCH" == "Unknown" ]; then
    echo "Unsupported architecture: $(uname -m)";
    exit 1;
  fi

  DOWNLOADS=$(curl -s "$URL" | grep browser_download_url | cut -d\" -f4);
  DOWNLOAD=$(echo "$DOWNLOADS" | grep "$PLATFORM" | grep "$ARCH" | cut -d\" -f4)
}

make_dirs() {
  rm -rf "$HOME_PATH/.atsign/temp";
  mkdir -p "$HOME_PATH/.ssh" \
           "$HOME_PATH/.sshnp" \
           "$HOME_PATH/.atsign/keys" \
           "$HOME_PATH/.atsign/temp" \
           "$HOME_PATH/.local/bin";
}

download() {
  if [ -n "$SSHNP_LOCAL" ]; then
    echo "DEV MODE: Installing using local $EXT file: $SSHNP_LOCAL";
    cp "$SSHNP_LOCAL" "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT";
  else
    echo "Downloading $BINARY_NAME from $DOWNLOAD";
    curl -sL "$DOWNLOAD" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT";
  fi

  if [ ! -f "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" ]; then
    echo "Failed to download $BINARY_NAME";
    exit 1;
  fi

  case "$EXT" in
    zip)
      unzip -qo "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" -d "$HOME_PATH/.atsign/temp";
      ;;
    tgz|tar.gz)
      tar -zxf "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" -C "$HOME_PATH/.atsign/temp/";
      ;;
  esac

  if [ -n "$SSHNP_DEV_MODE" ]; then
    echo "DEV MODE: Installing from local repo: $SSHNP_DEV_MODE";
    cp -R "$SSHNP_DEV_MODE/templates/" "$HOME_PATH/.atsign/temp/$BINARY_NAME/templates/";
    cp "$SSHNP_DEV_MODE"/scripts/* "$HOME_PATH/.atsign/temp/$BINARY_NAME";
  fi
}

# Place the actual sshnp binary
setup_main_binaries() {
  MAIN_BINARIES="$BINARY_NAME at_activate sshrv";
  for binary in $MAIN_BINARIES; do
    mv "$HOME_PATH/.atsign/temp/$BINARY_NAME/$binary" "$HOME_PATH/.local/bin/$binary";
    chmod +x "$HOME_PATH/.local/bin/$binary";
  done
  echo "Installed binaries: $MAIN_BINARIES";
}

# Place custom user based scripts
setup_custom_binary() {
  SSHNP_KEY_FILE="$BINARY_NAME$DEVICE_MANAGER_ATSIGN"
  ssh-keygen -o -a 100 -t ed25519 -f "$HOME_PATH/.ssh/$SSHNP_KEY_FILE" \
     -C "$BINARY_NAME$CLIENT_ATSIGN$DEVICE_MANAGER_ATSIGN" -N "" -q;

  echo "Installing $BINARY_NAME$DEVICE_MANAGER_ATSIGN to $HOME_PATH/.local/bin/$BINARY_NAME$DEVICE_MANAGER_ATSIGN";
  # = is used as the delimiter to avoid escaping / in the path
  sed -e "s=\$BINARY_PATH=$HOME_PATH/.local/bin/$BINARY_NAME=g" \
      -e "s/\$SSHNP_PUBLIC_KEY/$SSHNP_KEY_FILE.pub/g" \
      -e "s/\$CLIENT_ATSIGN/$CLIENT_ATSIGN/g" \
      -e "s/\$DEVICE_MANAGER_ATSIGN/$DEVICE_MANAGER_ATSIGN/g" \
      -e "s/\$DEFAULT_HOST_ATSIGN/$HOST_RENDEZVOUS_ATSIGN/g" \
  <"$HOME_PATH/.atsign/temp/$BINARY_NAME/templates/client/sshnp-full.sh" \
  >"$HOME_PATH/.local/bin/$BINARY_NAME$DEVICE_MANAGER_ATSIGN"
  chmod +x "$HOME_PATH/.local/bin/$BINARY_NAME$DEVICE_MANAGER_ATSIGN";
}

post_install() {
  rm -rf "$HOME_PATH/.atsign/temp";
  echo;

  if ! echo "$PATH" | grep -q "$HOME_PATH/.local/bin"; then
    PATH="\$PATH:$HOME_PATH/.local/bin";
    echo "Added $HOME_PATH/.local/bin to your PATH."
    echo "Include the following line in your shell profile to persist across logins:"
    echo "  export PATH=\"\$PATH:$HOME_PATH/.local/bin\""
  fi

  echo; echo "Installation complete!";
}

# Wrapping install steps prevents issues caused by interrupting the download
main () {
  parse_env
  make_dirs
  download

  setup_main_binaries

  case "$SSHNP_OP" in
    install)
      setup_custom_binary
      ;;
    update);;
    *)
      echo "Invalid operation: $SSHNP_OP";
      exit 0;
      ;;
  esac

  post_install
}

parse_args "$@";
main
