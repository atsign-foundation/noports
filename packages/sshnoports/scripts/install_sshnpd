#!/bin/bash

BINARY_NAME="sshnpd";

norm_atsign() {
  KEY="$1" # Get the variable name
  INPUT=${!KEY} # Get the value of the variable
  shopt -s extglob
  ATSIGN=${INPUT/#?(\@)/\@} # Add @ if missing
  shopt -u extglob
  export "${KEY}"="$ATSIGN" # Set the variable to new value
}

norm_version() {
  KEY="$1" # Get the variable name
  INPUT=${!KEY} # Get the value of the variable
  shopt -s extglob
  OUTPUT=${INPUT#tags\/} # Remove tags prefix if present
  OUTPUT=${OUTPUT#v} # Remove v prefix if present
  shopt -u extglob
  export "${KEY}"="tags/v$OUTPUT" # Add full tags/v prefix
}

usage() {
  echo "Usage: $0 [options]"
  echo "General options:"
  echo "  -u, --update                Update all services instead of installing"
  echo "  -l, --local <path>          Install using local zip/tgz"
  echo "  -r, --repo <path>           Install using local repo"
  echo "  -h, --help                  Display this help message"
  echo ""
  echo "Installation options:"
  echo "  -c, --client <address>      Client address (e.g. @alice_client)"
  echo "  -d, --device <address>      Device address (e.g. @alice_device)"
  echo "  -n, --name <device name>    Name of the device"
  echo "  -v, --version <version>     Version to install (default: latest)"
}

parse_args() {
  SSHNP_OP="install"
  while [ $# -gt 0 ]; do
    case "$1" in
      -u|--update)
        SSHNP_OP="update"
        shift 1
      ;;
      -h|--help)
        usage
        exit 0
      ;;
      -l|--local)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_LOCAL="$2"
        shift 2
      ;;
      -r|--repo)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_DEV_MODE="$2"
        shift 2
      ;;
      -c|--client)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        CLIENT_ATSIGN="$2"
        shift 2
      ;;
      -d|--device)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        DEVICE_MANAGER_ATSIGN="$2"
        shift 2
      ;;
      -n|--name)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_DEVICE_NAME="$2"
        shift 2
      ;;
      -v|--version)
        if [ $# -lt 0 ]; then
          echo "Missing argument for $1";
          exit 1;
        fi
        SSHNP_VERSION="$2"
        shift 2
      ;;
      *)
        echo "Unknown argument: $1"
        exit 1
      ;;
    esac
  done

  if [ "$SSHNP_OP" = "install" ]; then
    if [ -z "$CLIENT_ATSIGN" ]; then
      read -rp "Client address (e.g. @alice_client): " CLIENT_ATSIGN;
    fi

    if [ -z "$DEVICE_MANAGER_ATSIGN" ]; then
      read -rp "Device address (e.g. @alice_device): " DEVICE_MANAGER_ATSIGN;
    fi

    if [ -z "$SSHNP_DEVICE_NAME" ]; then
      read -rp "Device name: " SSHNP_DEVICE_NAME;
    fi

    while [ -z "$SSHNP_DEVICE_NAME" ] ||
      [ "${#SSHNP_DEVICE_NAME}" -gt 15 ] ||
      [[ "$SSHNP_DEVICE_NAME" =~ [^a-zA-Z0-9] ]]; do
        echo "Device name must be between 1 and 15 characters and only contain alphanumeric characters";
        read -rp "Device name: " SSHNP_DEVICE_NAME;
    done;

    norm_atsign CLIENT_ATSIGN
    norm_atsign DEVICE_MANAGER_ATSIGN
    echo;
  fi
}

parse_env() {
  if [ -z "$SSHNP_USER" ]; then
    SSHNP_USER="$USER";
  fi
  HOME_PATH=$(eval echo "~$SSHNP_USER");

  if [ -z "$SSHNP_VERSION" ]; then
    SSHNP_VERSION="latest";
  else
    norm_version SSHNP_VERSION
  fi
  URL="https://api.github.com/repos/atsign-foundation/sshnoports/releases/$SSHNP_VERSION";

  case "$(uname)" in
    Darwin)
      PLATFORM="macos"
      EXT="zip"
      ;;
    Linux)
      PLATFORM="linux"
      EXT="tgz"
      ;;
    *)
      PLATFORM="Unknown"
      ;;
  esac

  if [ "$PLATFORM" == "Unknown" ]; then
    echo "Unsupported platform: $(uname)";
    exit 1;
  fi

  # ARCH includes the dot at the end to avoid conflict between arm and arm64
  case "$(uname -m)" in
    aarch64|arm64) ARCH="arm64\.";;
    x86_64|amd64) ARCH="x64\.";;
    armv7l|arm) ARCH="arm\.";;
    riscv64) ARCH="riscv64\.";;
    *) ARCH="Unknown";;
  esac

  if [ "$ARCH" == "Unknown" ]; then
    echo "Unsupported architecture: $(uname -m)";
    exit 1;
  fi

  DOWNLOADS=$(curl -s "$URL" | grep browser_download_url | cut -d\" -f4);
  DOWNLOAD=$(echo "$DOWNLOADS" | grep "$PLATFORM" | grep "$ARCH" | cut -d\" -f4)
}

make_dirs() {
  rm -rf "$HOME_PATH/.atsign/temp";
  mkdir -p "$HOME_PATH/.ssh/" \
           "$HOME_PATH/.$BINARY_NAME/logs" \
           "$HOME_PATH/.atsign/keys" \
           "$HOME_PATH/.atsign/temp" \
           "$HOME_PATH/.local/bin";

  if [ ! -f "$HOME_PATH/.ssh/authorized_keys" ]; then
    touch "$HOME_PATH/.ssh/authorized_keys";
    chmod 600 "$HOME_PATH/.ssh/authorized_keys";
  fi
}

download() {
  if [ -z "$SSHNP_DEV_MODE" ]; then
    if [ -n "$SSHNP_LOCAL" ]; then
      echo "DEV MODE: Installing using local $EXT file: $SSHNP_LOCAL";
      cp "$SSHNP_LOCAL" "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT";
    else
      echo "Downloading $BINARY_NAME from $DOWNLOAD";
      curl -sL "$DOWNLOAD" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT";
    fi

    if [ ! -f "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" ]; then
      echo "Failed to download $BINARY_NAME";
      exit 1;
    fi

    case "$EXT" in
      zip)
        unzip -qo "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" -d "$HOME_PATH/.atsign/temp/";
        ;;
      tgz|tar.gz)
        tar -zxf "$HOME_PATH/.atsign/temp/$BINARY_NAME.$EXT" -C "$HOME_PATH/.atsign/temp/";
        ;;
    esac
    mv "$HOME_PATH/.atsign/temp/sshnp" "$HOME_PATH/.atsign/temp/$BINARY_NAME"; # Rename the extracted folder
  fi

  if [ -n "$SSHNP_DEV_MODE" ]; then
    echo "DEV MODE: Installing from local repo: $SSHNP_DEV_MODE";
    dart compile exe "$SSHNP_DEV_MODE/bin/sshnp.dart" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME/sshnp";
    dart compile exe "$SSHNP_DEV_MODE/bin/sshnpd.dart" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME/sshnpd";
    dart compile exe "$SSHNP_DEV_MODE/bin/sshrv.dart" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME/sshrv";
    dart compile exe "$SSHNP_DEV_MODE/bin/sshrvd.dart" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME/sshrvd";
    dart compile exe "$SSHNP_DEV_MODE/bin/activate_cli.dart" -o "$HOME_PATH/.atsign/temp/$BINARY_NAME/at_activate";

    cp -R "$SSHNP_DEV_MODE/templates/" "$HOME_PATH/.atsign/temp/$BINARY_NAME/templates/";
    cp "$SSHNP_DEV_MODE"/scripts/* "$HOME_PATH/.atsign/temp/$BINARY_NAME";
  fi
}

# Place the actual sshnp binary
setup_main_binaries() {
  MAIN_BINARIES="$BINARY_NAME at_activate sshrv";
  for binary in $MAIN_BINARIES; do
    mv "$HOME_PATH/.atsign/temp/$BINARY_NAME/$binary" "$HOME_PATH/.local/bin/$binary";
    chmod +x "$HOME_PATH/.local/bin/$binary";
  done
  echo "Installed binaries: $MAIN_BINARIES";
}

# Place custom user based scripts
setup_service() {
  SSHNPD_SERVICE_BINARY_PATH="$HOME_PATH/.local/bin/$BINARY_NAME$CLIENT_ATSIGN";
  # = is used as the delimiter to avoid escaping / in the path
  sed -e "s=\$HOME=$HOME_PATH=g" \
    -e "s/\$1/$DEVICE_MANAGER_ATSIGN/g" \
    -e "s/\$2/$CLIENT_ATSIGN/g" \
    -e "s/\$3/$SSHNP_DEVICE_NAME/g" \
  <"$HOME_PATH/.atsign/temp/$BINARY_NAME/templates/headless/sshnpd.sh" \
  >"$SSHNPD_SERVICE_BINARY_PATH";
  chmod +x "$SSHNPD_SERVICE_BINARY_PATH";

  SSHNP_CRON_SCHEDULE="@reboot";
  if command -v tmux >/dev/null; then
    SSHNPD_SERVICE_MECHANISM="tmux";
    SSHNP_COMMAND="tmux new-session -d -s $BINARY_NAME$CLIENT_ATSIGN && tmux send-keys -t $BINARY_NAME$CLIENT_ATSIGN $SSHNPD_SERVICE_BINARY_PATH C-m"
  # Untested for the time being, feel free to use at your own risk:
  # elif command -v screen; then
  #   SSHNP_COMMAND="screen -dmS $BINARY_NAME$CLIENT_ATSIGtN $SSHNPD_SERVICE_BINARY_PATH"
  else
    SSHNPD_SERVICE_MECHANISM="cron";
    SSHNP_COMMAND="nohup $SSHNPD_SERVICE_BINARY_PATH > $HOME_PATH/.$BINARY_NAME/logs/$CLIENT_ATSIGN.log 2> $HOME_PATH/.$BINARY_NAME/logs/$CLIENT_ATSIGN.err"
    LOGROTATE="40 6 * * * logrotate -f $HOME_PATH/.$BINARY_NAME/logs/$CLIENT_ATSIGN.log"
  fi

  if grep -Fxq "$SSHNP_CRON_SCHEDULE $SSHNP_COMMAND" <(crontab -l 2>/dev/null); then
    NO_RUN=1;
    echo "Cron job already installed: '$SSHNP_CRON_SCHEDULE $SSHNP_COMMAND'";
  else
    (crontab -l 2>/dev/null; echo "$SSHNP_CRON_SCHEDULE $SSHNP_COMMAND") | crontab -
    echo "Installed cron job: '$SSHNP_CRON_SCHEDULE $SSHNP_COMMAND'";
  fi

  if [ "$SSHNPD_SERVICE_MECHANISM" = "cron" ]; then
    if grep -Fxq "$LOGROTATE" <(crontab -l 2>/dev/null); then
      echo "Cron job already installed: '$LOGROTATE'";
    else
      (crontab -l 2>/dev/null; echo "$LOGROTATE") | crontab -
      echo "Installed cron job: '$LOGROTATE'";
    fi
  fi

  if [ -z "$NO_RUN" ]; then
    echo "Starting $BINARY_NAME$CLIENT_ATSIGN service...";
    eval "$SSHNP_COMMAND &"
  fi

  SERVICE_LIST_FILE="$HOME_PATH/.$BINARY_NAME/.service_list";
  echo "$BINARY_NAME$CLIENT_ATSIGN $SSHNPD_SERVICE_MECHANISM" >> "$SERVICE_LIST_FILE";
}

# used to restart the service after an update
restart_service() {
  killall -q -u "$SSHNP_USER" -r "$BINARY_NAME$"
}

post_install() {
  rm -rf "$HOME_PATH/.atsign/temp";
  echo; echo "Installation complete!";
}

# Wrapping install steps prevents issues caused by interrupting the download
main () {
  parse_env
  make_dirs
  download

  setup_main_binaries

  if [ "$SSHNP_OP" = 'install' ]; then
    setup_service
  fi

  post_install

  if [ "$SSHNP_OP" = 'update' ]; then
    restart_service
  fi
}

parse_args "$@";
main
